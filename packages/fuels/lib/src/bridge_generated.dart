// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.75.3.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

abstract class Fuels {
  Future<WalletUnlocked> newRandomStaticMethodWalletUnlocked(
      {Provider? provider, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kNewRandomStaticMethodWalletUnlockedConstMeta;

  Future<WalletUnlocked> newFromPrivateKeyStaticMethodWalletUnlocked(
      {required String privateKey, Provider? provider, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kNewFromPrivateKeyStaticMethodWalletUnlockedConstMeta;

  Future<WalletUnlocked> newFromMnemonicPhraseStaticMethodWalletUnlocked(
      {required String phrase, Provider? provider, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kNewFromMnemonicPhraseStaticMethodWalletUnlockedConstMeta;

  Future<WalletUnlocked>
      newFromMnemonicPhraseWithPathStaticMethodWalletUnlocked(
          {required String phrase,
          required String path,
          Provider? provider,
          dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kNewFromMnemonicPhraseWithPathStaticMethodWalletUnlockedConstMeta;

  Future<Bech32Address> addressMethodWalletUnlocked(
      {required WalletUnlocked that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddressMethodWalletUnlockedConstMeta;

  Future<String> transferMethodWalletUnlocked(
      {required WalletUnlocked that,
      required Bech32Address to,
      required int amount,
      required String asset,
      required TxParameters txParameters,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTransferMethodWalletUnlockedConstMeta;

  /// Clones the transfer function but doesn't submit the transaction
  /// TODO: do not sign the tx?
  Future<Uint8List> genTransferTxRequestMethodWalletUnlocked(
      {required WalletUnlocked that,
      required Bech32Address to,
      required int amount,
      required String asset,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGenTransferTxRequestMethodWalletUnlockedConstMeta;

  Future<String> sendTransactionMethodWalletUnlocked(
      {required WalletUnlocked that,
      required Uint8List encodedTx,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSendTransactionMethodWalletUnlockedConstMeta;

  Future<String> signMessageMethodWalletUnlocked(
      {required WalletUnlocked that, required String message, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignMessageMethodWalletUnlockedConstMeta;

  Future<Bech32Address> fromBech32StringStaticMethodBech32Address(
      {required String s, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kFromBech32StringStaticMethodBech32AddressConstMeta;

  Future<Bech32Address> fromB256StringStaticMethodBech32Address(
      {required String s, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kFromB256StringStaticMethodBech32AddressConstMeta;

  Future<String> toBech32StringMethodBech32Address(
      {required Bech32Address that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kToBech32StringMethodBech32AddressConstMeta;

  Future<String> toB256StringMethodBech32Address(
      {required Bech32Address that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kToB256StringMethodBech32AddressConstMeta;

  Future<Provider> connectStaticMethodProvider(
      {required String url, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectStaticMethodProviderConstMeta;

  DropFnType get dropOpaqueNativeBech32Address;
  ShareFnType get shareOpaqueNativeBech32Address;
  OpaqueTypeFinalizer get NativeBech32AddressFinalizer;
}

@sealed
class NativeBech32Address extends FrbOpaque {
  final Fuels bridge;
  NativeBech32Address.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueNativeBech32Address;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueNativeBech32Address;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.NativeBech32AddressFinalizer;
}

class Bech32Address {
  final Fuels bridge;
  final NativeBech32Address native;

  const Bech32Address({
    required this.bridge,
    required this.native,
  });

  static Future<Bech32Address> fromBech32String(
          {required Fuels bridge, required String s, dynamic hint}) =>
      bridge.fromBech32StringStaticMethodBech32Address(s: s, hint: hint);

  static Future<Bech32Address> fromB256String(
          {required Fuels bridge, required String s, dynamic hint}) =>
      bridge.fromB256StringStaticMethodBech32Address(s: s, hint: hint);

  Future<String> toBech32String({dynamic hint}) =>
      bridge.toBech32StringMethodBech32Address(
        that: this,
      );

  Future<String> toB256String({dynamic hint}) =>
      bridge.toB256StringMethodBech32Address(
        that: this,
      );
}

class Provider {
  final Fuels bridge;
  final String nodeUrl;

  const Provider({
    required this.bridge,
    required this.nodeUrl,
  });

  static Future<Provider> connect(
          {required Fuels bridge, required String url, dynamic hint}) =>
      bridge.connectStaticMethodProvider(url: url, hint: hint);
}

class TxParameters {
  final int gasPrice;
  final int gasLimit;
  final int maturity;

  const TxParameters({
    required this.gasPrice,
    required this.gasLimit,
    required this.maturity,
  });
}

class WalletUnlocked {
  final Fuels bridge;
  final String privateKey;
  final String? mnemonicPhrase;
  final Provider? provider;

  const WalletUnlocked({
    required this.bridge,
    required this.privateKey,
    this.mnemonicPhrase,
    this.provider,
  });

  static Future<WalletUnlocked> newRandom(
          {required Fuels bridge, Provider? provider, dynamic hint}) =>
      bridge.newRandomStaticMethodWalletUnlocked(
          provider: provider, hint: hint);

  static Future<WalletUnlocked> newFromPrivateKey(
          {required Fuels bridge,
          required String privateKey,
          Provider? provider,
          dynamic hint}) =>
      bridge.newFromPrivateKeyStaticMethodWalletUnlocked(
          privateKey: privateKey, provider: provider, hint: hint);

  static Future<WalletUnlocked> newFromMnemonicPhrase(
          {required Fuels bridge,
          required String phrase,
          Provider? provider,
          dynamic hint}) =>
      bridge.newFromMnemonicPhraseStaticMethodWalletUnlocked(
          phrase: phrase, provider: provider, hint: hint);

  static Future<WalletUnlocked> newFromMnemonicPhraseWithPath(
          {required Fuels bridge,
          required String phrase,
          required String path,
          Provider? provider,
          dynamic hint}) =>
      bridge.newFromMnemonicPhraseWithPathStaticMethodWalletUnlocked(
          phrase: phrase, path: path, provider: provider, hint: hint);

  Future<Bech32Address> address({dynamic hint}) =>
      bridge.addressMethodWalletUnlocked(
        that: this,
      );

  Future<String> transfer(
          {required Bech32Address to,
          required int amount,
          required String asset,
          required TxParameters txParameters,
          dynamic hint}) =>
      bridge.transferMethodWalletUnlocked(
        that: this,
        to: to,
        amount: amount,
        asset: asset,
        txParameters: txParameters,
      );

  /// Clones the transfer function but doesn't submit the transaction
  /// TODO: do not sign the tx?
  Future<Uint8List> genTransferTxRequest(
          {required Bech32Address to,
          required int amount,
          required String asset,
          dynamic hint}) =>
      bridge.genTransferTxRequestMethodWalletUnlocked(
        that: this,
        to: to,
        amount: amount,
        asset: asset,
      );

  Future<String> sendTransaction(
          {required Uint8List encodedTx, dynamic hint}) =>
      bridge.sendTransactionMethodWalletUnlocked(
        that: this,
        encodedTx: encodedTx,
      );

  Future<String> signMessage({required String message, dynamic hint}) =>
      bridge.signMessageMethodWalletUnlocked(
        that: this,
        message: message,
      );
}

class FuelsImpl implements Fuels {
  final FuelsPlatform _platform;
  factory FuelsImpl(ExternalLibrary dylib) =>
      FuelsImpl.raw(FuelsPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory FuelsImpl.wasm(FutureOr<WasmModule> module) =>
      FuelsImpl(module as ExternalLibrary);
  FuelsImpl.raw(this._platform);
  Future<WalletUnlocked> newRandomStaticMethodWalletUnlocked(
      {Provider? provider, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_box_autoadd_provider(provider);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new_random__static_method__WalletUnlocked(port_, arg0),
      parseSuccessData: (d) => _wire2api_wallet_unlocked(d),
      constMeta: kNewRandomStaticMethodWalletUnlockedConstMeta,
      argValues: [provider],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewRandomStaticMethodWalletUnlockedConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "new_random__static_method__WalletUnlocked",
            argNames: ["provider"],
          );

  Future<WalletUnlocked> newFromPrivateKeyStaticMethodWalletUnlocked(
      {required String privateKey, Provider? provider, dynamic hint}) {
    var arg0 = _platform.api2wire_String(privateKey);
    var arg1 = _platform.api2wire_opt_box_autoadd_provider(provider);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new_from_private_key__static_method__WalletUnlocked(
              port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_wallet_unlocked(d),
      constMeta: kNewFromPrivateKeyStaticMethodWalletUnlockedConstMeta,
      argValues: [privateKey, provider],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewFromPrivateKeyStaticMethodWalletUnlockedConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "new_from_private_key__static_method__WalletUnlocked",
            argNames: ["privateKey", "provider"],
          );

  Future<WalletUnlocked> newFromMnemonicPhraseStaticMethodWalletUnlocked(
      {required String phrase, Provider? provider, dynamic hint}) {
    var arg0 = _platform.api2wire_String(phrase);
    var arg1 = _platform.api2wire_opt_box_autoadd_provider(provider);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new_from_mnemonic_phrase__static_method__WalletUnlocked(
              port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_wallet_unlocked(d),
      constMeta: kNewFromMnemonicPhraseStaticMethodWalletUnlockedConstMeta,
      argValues: [phrase, provider],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewFromMnemonicPhraseStaticMethodWalletUnlockedConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName:
                "new_from_mnemonic_phrase__static_method__WalletUnlocked",
            argNames: ["phrase", "provider"],
          );

  Future<WalletUnlocked>
      newFromMnemonicPhraseWithPathStaticMethodWalletUnlocked(
          {required String phrase,
          required String path,
          Provider? provider,
          dynamic hint}) {
    var arg0 = _platform.api2wire_String(phrase);
    var arg1 = _platform.api2wire_String(path);
    var arg2 = _platform.api2wire_opt_box_autoadd_provider(provider);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new_from_mnemonic_phrase_with_path__static_method__WalletUnlocked(
              port_, arg0, arg1, arg2),
      parseSuccessData: (d) => _wire2api_wallet_unlocked(d),
      constMeta:
          kNewFromMnemonicPhraseWithPathStaticMethodWalletUnlockedConstMeta,
      argValues: [phrase, path, provider],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewFromMnemonicPhraseWithPathStaticMethodWalletUnlockedConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName:
                "new_from_mnemonic_phrase_with_path__static_method__WalletUnlocked",
            argNames: ["phrase", "path", "provider"],
          );

  Future<Bech32Address> addressMethodWalletUnlocked(
      {required WalletUnlocked that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wallet_unlocked(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_address__method__WalletUnlocked(port_, arg0),
      parseSuccessData: (d) => _wire2api_bech_32_address(d),
      constMeta: kAddressMethodWalletUnlockedConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddressMethodWalletUnlockedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "address__method__WalletUnlocked",
        argNames: ["that"],
      );

  Future<String> transferMethodWalletUnlocked(
      {required WalletUnlocked that,
      required Bech32Address to,
      required int amount,
      required String asset,
      required TxParameters txParameters,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wallet_unlocked(that);
    var arg1 = _platform.api2wire_box_autoadd_bech_32_address(to);
    var arg2 = _platform.api2wire_u64(amount);
    var arg3 = _platform.api2wire_String(asset);
    var arg4 = _platform.api2wire_box_autoadd_tx_parameters(txParameters);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_transfer__method__WalletUnlocked(
          port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_String,
      constMeta: kTransferMethodWalletUnlockedConstMeta,
      argValues: [that, to, amount, asset, txParameters],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTransferMethodWalletUnlockedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "transfer__method__WalletUnlocked",
        argNames: ["that", "to", "amount", "asset", "txParameters"],
      );

  Future<Uint8List> genTransferTxRequestMethodWalletUnlocked(
      {required WalletUnlocked that,
      required Bech32Address to,
      required int amount,
      required String asset,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wallet_unlocked(that);
    var arg1 = _platform.api2wire_box_autoadd_bech_32_address(to);
    var arg2 = _platform.api2wire_u64(amount);
    var arg3 = _platform.api2wire_String(asset);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_gen_transfer_tx_request__method__WalletUnlocked(
              port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kGenTransferTxRequestMethodWalletUnlockedConstMeta,
      argValues: [that, to, amount, asset],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGenTransferTxRequestMethodWalletUnlockedConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "gen_transfer_tx_request__method__WalletUnlocked",
            argNames: ["that", "to", "amount", "asset"],
          );

  Future<String> sendTransactionMethodWalletUnlocked(
      {required WalletUnlocked that,
      required Uint8List encodedTx,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wallet_unlocked(that);
    var arg1 = _platform.api2wire_uint_8_list(encodedTx);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_send_transaction__method__WalletUnlocked(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kSendTransactionMethodWalletUnlockedConstMeta,
      argValues: [that, encodedTx],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSendTransactionMethodWalletUnlockedConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "send_transaction__method__WalletUnlocked",
            argNames: ["that", "encodedTx"],
          );

  Future<String> signMessageMethodWalletUnlocked(
      {required WalletUnlocked that, required String message, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wallet_unlocked(that);
    var arg1 = _platform.api2wire_String(message);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_sign_message__method__WalletUnlocked(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kSignMessageMethodWalletUnlockedConstMeta,
      argValues: [that, message],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSignMessageMethodWalletUnlockedConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "sign_message__method__WalletUnlocked",
            argNames: ["that", "message"],
          );

  Future<Bech32Address> fromBech32StringStaticMethodBech32Address(
      {required String s, dynamic hint}) {
    var arg0 = _platform.api2wire_String(s);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_from_bech32_string__static_method__Bech32Address(port_, arg0),
      parseSuccessData: (d) => _wire2api_bech_32_address(d),
      constMeta: kFromBech32StringStaticMethodBech32AddressConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kFromBech32StringStaticMethodBech32AddressConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "from_bech32_string__static_method__Bech32Address",
            argNames: ["s"],
          );

  Future<Bech32Address> fromB256StringStaticMethodBech32Address(
      {required String s, dynamic hint}) {
    var arg0 = _platform.api2wire_String(s);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_from_b256_string__static_method__Bech32Address(port_, arg0),
      parseSuccessData: (d) => _wire2api_bech_32_address(d),
      constMeta: kFromB256StringStaticMethodBech32AddressConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kFromB256StringStaticMethodBech32AddressConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "from_b256_string__static_method__Bech32Address",
            argNames: ["s"],
          );

  Future<String> toBech32StringMethodBech32Address(
      {required Bech32Address that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_bech_32_address(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_to_bech32_string__method__Bech32Address(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kToBech32StringMethodBech32AddressConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kToBech32StringMethodBech32AddressConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "to_bech32_string__method__Bech32Address",
            argNames: ["that"],
          );

  Future<String> toB256StringMethodBech32Address(
      {required Bech32Address that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_bech_32_address(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_to_b256_string__method__Bech32Address(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kToB256StringMethodBech32AddressConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kToB256StringMethodBech32AddressConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "to_b256_string__method__Bech32Address",
            argNames: ["that"],
          );

  Future<Provider> connectStaticMethodProvider(
      {required String url, dynamic hint}) {
    var arg0 = _platform.api2wire_String(url);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_connect__static_method__Provider(port_, arg0),
      parseSuccessData: (d) => _wire2api_provider(d),
      constMeta: kConnectStaticMethodProviderConstMeta,
      argValues: [url],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectStaticMethodProviderConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "connect__static_method__Provider",
        argNames: ["url"],
      );

  DropFnType get dropOpaqueNativeBech32Address =>
      _platform.inner.drop_opaque_NativeBech32Address;
  ShareFnType get shareOpaqueNativeBech32Address =>
      _platform.inner.share_opaque_NativeBech32Address;
  OpaqueTypeFinalizer get NativeBech32AddressFinalizer =>
      _platform.NativeBech32AddressFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  NativeBech32Address _wire2api_NativeBech32Address(dynamic raw) {
    return NativeBech32Address.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  Bech32Address _wire2api_bech_32_address(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Bech32Address(
      bridge: this,
      native: _wire2api_NativeBech32Address(arr[0]),
    );
  }

  Provider _wire2api_box_autoadd_provider(dynamic raw) {
    return _wire2api_provider(raw);
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  Provider? _wire2api_opt_box_autoadd_provider(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_provider(raw);
  }

  Provider _wire2api_provider(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Provider(
      bridge: this,
      nodeUrl: _wire2api_String(arr[0]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  WalletUnlocked _wire2api_wallet_unlocked(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return WalletUnlocked(
      bridge: this,
      privateKey: _wire2api_String(arr[0]),
      mnemonicPhrase: _wire2api_opt_String(arr[1]),
      provider: _wire2api_opt_box_autoadd_provider(arr[2]),
    );
  }
}

// Section: api2wire

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class FuelsPlatform extends FlutterRustBridgeBase<FuelsWire> {
  FuelsPlatform(ffi.DynamicLibrary dylib) : super(FuelsWire(dylib));

// Section: api2wire

  @protected
  wire_NativeBech32Address api2wire_NativeBech32Address(
      NativeBech32Address raw) {
    final ptr = inner.new_NativeBech32Address();
    _api_fill_to_wire_NativeBech32Address(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_Bech32Address> api2wire_box_autoadd_bech_32_address(
      Bech32Address raw) {
    final ptr = inner.new_box_autoadd_bech_32_address_0();
    _api_fill_to_wire_bech_32_address(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Provider> api2wire_box_autoadd_provider(Provider raw) {
    final ptr = inner.new_box_autoadd_provider_0();
    _api_fill_to_wire_provider(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_TxParameters> api2wire_box_autoadd_tx_parameters(
      TxParameters raw) {
    final ptr = inner.new_box_autoadd_tx_parameters_0();
    _api_fill_to_wire_tx_parameters(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_WalletUnlocked> api2wire_box_autoadd_wallet_unlocked(
      WalletUnlocked raw) {
    final ptr = inner.new_box_autoadd_wallet_unlocked_0();
    _api_fill_to_wire_wallet_unlocked(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_Provider> api2wire_opt_box_autoadd_provider(Provider? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_provider(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

  late final OpaqueTypeFinalizer _NativeBech32AddressFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_NativeBech32AddressPtr);
  OpaqueTypeFinalizer get NativeBech32AddressFinalizer =>
      _NativeBech32AddressFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_NativeBech32Address(
      NativeBech32Address apiObj, wire_NativeBech32Address wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_bech_32_address(
      Bech32Address apiObj, wire_Bech32Address wireObj) {
    wireObj.native = api2wire_NativeBech32Address(apiObj.native);
  }

  void _api_fill_to_wire_box_autoadd_bech_32_address(
      Bech32Address apiObj, ffi.Pointer<wire_Bech32Address> wireObj) {
    _api_fill_to_wire_bech_32_address(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_provider(
      Provider apiObj, ffi.Pointer<wire_Provider> wireObj) {
    _api_fill_to_wire_provider(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_tx_parameters(
      TxParameters apiObj, ffi.Pointer<wire_TxParameters> wireObj) {
    _api_fill_to_wire_tx_parameters(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_wallet_unlocked(
      WalletUnlocked apiObj, ffi.Pointer<wire_WalletUnlocked> wireObj) {
    _api_fill_to_wire_wallet_unlocked(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_opt_box_autoadd_provider(
      Provider? apiObj, ffi.Pointer<wire_Provider> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_provider(apiObj, wireObj);
  }

  void _api_fill_to_wire_provider(Provider apiObj, wire_Provider wireObj) {
    wireObj.node_url = api2wire_String(apiObj.nodeUrl);
  }

  void _api_fill_to_wire_tx_parameters(
      TxParameters apiObj, wire_TxParameters wireObj) {
    wireObj.gas_price = api2wire_u64(apiObj.gasPrice);
    wireObj.gas_limit = api2wire_u64(apiObj.gasLimit);
    wireObj.maturity = api2wire_u32(apiObj.maturity);
  }

  void _api_fill_to_wire_wallet_unlocked(
      WalletUnlocked apiObj, wire_WalletUnlocked wireObj) {
    wireObj.private_key = api2wire_String(apiObj.privateKey);
    wireObj.mnemonic_phrase = api2wire_opt_String(apiObj.mnemonicPhrase);
    wireObj.provider = api2wire_opt_box_autoadd_provider(apiObj.provider);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class FuelsWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FuelsWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FuelsWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_new_random__static_method__WalletUnlocked(
    int port_,
    ffi.Pointer<wire_Provider> provider,
  ) {
    return _wire_new_random__static_method__WalletUnlocked(
      port_,
      provider,
    );
  }

  late final _wire_new_random__static_method__WalletUnlockedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Provider>)>>(
      'wire_new_random__static_method__WalletUnlocked');
  late final _wire_new_random__static_method__WalletUnlocked =
      _wire_new_random__static_method__WalletUnlockedPtr
          .asFunction<void Function(int, ffi.Pointer<wire_Provider>)>();

  void wire_new_from_private_key__static_method__WalletUnlocked(
    int port_,
    ffi.Pointer<wire_uint_8_list> private_key,
    ffi.Pointer<wire_Provider> provider,
  ) {
    return _wire_new_from_private_key__static_method__WalletUnlocked(
      port_,
      private_key,
      provider,
    );
  }

  late final _wire_new_from_private_key__static_method__WalletUnlockedPtr =
      _lookup<
              ffi
              .NativeFunction<
                  ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                      ffi.Pointer<wire_Provider>)>>(
          'wire_new_from_private_key__static_method__WalletUnlocked');
  late final _wire_new_from_private_key__static_method__WalletUnlocked =
      _wire_new_from_private_key__static_method__WalletUnlockedPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Provider>)>();

  void wire_new_from_mnemonic_phrase__static_method__WalletUnlocked(
    int port_,
    ffi.Pointer<wire_uint_8_list> phrase,
    ffi.Pointer<wire_Provider> provider,
  ) {
    return _wire_new_from_mnemonic_phrase__static_method__WalletUnlocked(
      port_,
      phrase,
      provider,
    );
  }

  late final _wire_new_from_mnemonic_phrase__static_method__WalletUnlockedPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                      ffi.Pointer<wire_Provider>)>>(
          'wire_new_from_mnemonic_phrase__static_method__WalletUnlocked');
  late final _wire_new_from_mnemonic_phrase__static_method__WalletUnlocked =
      _wire_new_from_mnemonic_phrase__static_method__WalletUnlockedPtr
          .asFunction<
              void Function(int, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_Provider>)>();

  void wire_new_from_mnemonic_phrase_with_path__static_method__WalletUnlocked(
    int port_,
    ffi.Pointer<wire_uint_8_list> phrase,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_Provider> provider,
  ) {
    return _wire_new_from_mnemonic_phrase_with_path__static_method__WalletUnlocked(
      port_,
      phrase,
      path,
      provider,
    );
  }

  late final _wire_new_from_mnemonic_phrase_with_path__static_method__WalletUnlockedPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_uint_8_list>,
                      ffi.Pointer<wire_uint_8_list>,
                      ffi.Pointer<wire_Provider>)>>(
          'wire_new_from_mnemonic_phrase_with_path__static_method__WalletUnlocked');
  late final _wire_new_from_mnemonic_phrase_with_path__static_method__WalletUnlocked =
      _wire_new_from_mnemonic_phrase_with_path__static_method__WalletUnlockedPtr
          .asFunction<
              void Function(int, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_Provider>)>();

  void wire_address__method__WalletUnlocked(
    int port_,
    ffi.Pointer<wire_WalletUnlocked> that,
  ) {
    return _wire_address__method__WalletUnlocked(
      port_,
      that,
    );
  }

  late final _wire_address__method__WalletUnlockedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_WalletUnlocked>)>>(
      'wire_address__method__WalletUnlocked');
  late final _wire_address__method__WalletUnlocked =
      _wire_address__method__WalletUnlockedPtr
          .asFunction<void Function(int, ffi.Pointer<wire_WalletUnlocked>)>();

  void wire_transfer__method__WalletUnlocked(
    int port_,
    ffi.Pointer<wire_WalletUnlocked> that,
    ffi.Pointer<wire_Bech32Address> to,
    int amount,
    ffi.Pointer<wire_uint_8_list> asset,
    ffi.Pointer<wire_TxParameters> tx_parameters,
  ) {
    return _wire_transfer__method__WalletUnlocked(
      port_,
      that,
      to,
      amount,
      asset,
      tx_parameters,
    );
  }

  late final _wire_transfer__method__WalletUnlockedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_WalletUnlocked>,
                  ffi.Pointer<wire_Bech32Address>,
                  ffi.Uint64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_TxParameters>)>>(
      'wire_transfer__method__WalletUnlocked');
  late final _wire_transfer__method__WalletUnlocked =
      _wire_transfer__method__WalletUnlockedPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_WalletUnlocked>,
              ffi.Pointer<wire_Bech32Address>,
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_TxParameters>)>();

  void wire_gen_transfer_tx_request__method__WalletUnlocked(
    int port_,
    ffi.Pointer<wire_WalletUnlocked> that,
    ffi.Pointer<wire_Bech32Address> to,
    int amount,
    ffi.Pointer<wire_uint_8_list> asset,
  ) {
    return _wire_gen_transfer_tx_request__method__WalletUnlocked(
      port_,
      that,
      to,
      amount,
      asset,
    );
  }

  late final _wire_gen_transfer_tx_request__method__WalletUnlockedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_WalletUnlocked>,
                  ffi.Pointer<wire_Bech32Address>,
                  ffi.Uint64,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_gen_transfer_tx_request__method__WalletUnlocked');
  late final _wire_gen_transfer_tx_request__method__WalletUnlocked =
      _wire_gen_transfer_tx_request__method__WalletUnlockedPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_WalletUnlocked>,
              ffi.Pointer<wire_Bech32Address>,
              int,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_send_transaction__method__WalletUnlocked(
    int port_,
    ffi.Pointer<wire_WalletUnlocked> that,
    ffi.Pointer<wire_uint_8_list> encoded_tx,
  ) {
    return _wire_send_transaction__method__WalletUnlocked(
      port_,
      that,
      encoded_tx,
    );
  }

  late final _wire_send_transaction__method__WalletUnlockedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_WalletUnlocked>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_send_transaction__method__WalletUnlocked');
  late final _wire_send_transaction__method__WalletUnlocked =
      _wire_send_transaction__method__WalletUnlockedPtr.asFunction<
          void Function(int, ffi.Pointer<wire_WalletUnlocked>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_sign_message__method__WalletUnlocked(
    int port_,
    ffi.Pointer<wire_WalletUnlocked> that,
    ffi.Pointer<wire_uint_8_list> message,
  ) {
    return _wire_sign_message__method__WalletUnlocked(
      port_,
      that,
      message,
    );
  }

  late final _wire_sign_message__method__WalletUnlockedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_WalletUnlocked>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_sign_message__method__WalletUnlocked');
  late final _wire_sign_message__method__WalletUnlocked =
      _wire_sign_message__method__WalletUnlockedPtr.asFunction<
          void Function(int, ffi.Pointer<wire_WalletUnlocked>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_from_bech32_string__static_method__Bech32Address(
    int port_,
    ffi.Pointer<wire_uint_8_list> s,
  ) {
    return _wire_from_bech32_string__static_method__Bech32Address(
      port_,
      s,
    );
  }

  late final _wire_from_bech32_string__static_method__Bech32AddressPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_from_bech32_string__static_method__Bech32Address');
  late final _wire_from_bech32_string__static_method__Bech32Address =
      _wire_from_bech32_string__static_method__Bech32AddressPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_from_b256_string__static_method__Bech32Address(
    int port_,
    ffi.Pointer<wire_uint_8_list> s,
  ) {
    return _wire_from_b256_string__static_method__Bech32Address(
      port_,
      s,
    );
  }

  late final _wire_from_b256_string__static_method__Bech32AddressPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_from_b256_string__static_method__Bech32Address');
  late final _wire_from_b256_string__static_method__Bech32Address =
      _wire_from_b256_string__static_method__Bech32AddressPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_to_bech32_string__method__Bech32Address(
    int port_,
    ffi.Pointer<wire_Bech32Address> that,
  ) {
    return _wire_to_bech32_string__method__Bech32Address(
      port_,
      that,
    );
  }

  late final _wire_to_bech32_string__method__Bech32AddressPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Bech32Address>)>>(
      'wire_to_bech32_string__method__Bech32Address');
  late final _wire_to_bech32_string__method__Bech32Address =
      _wire_to_bech32_string__method__Bech32AddressPtr
          .asFunction<void Function(int, ffi.Pointer<wire_Bech32Address>)>();

  void wire_to_b256_string__method__Bech32Address(
    int port_,
    ffi.Pointer<wire_Bech32Address> that,
  ) {
    return _wire_to_b256_string__method__Bech32Address(
      port_,
      that,
    );
  }

  late final _wire_to_b256_string__method__Bech32AddressPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Bech32Address>)>>(
      'wire_to_b256_string__method__Bech32Address');
  late final _wire_to_b256_string__method__Bech32Address =
      _wire_to_b256_string__method__Bech32AddressPtr
          .asFunction<void Function(int, ffi.Pointer<wire_Bech32Address>)>();

  void wire_connect__static_method__Provider(
    int port_,
    ffi.Pointer<wire_uint_8_list> url,
  ) {
    return _wire_connect__static_method__Provider(
      port_,
      url,
    );
  }

  late final _wire_connect__static_method__ProviderPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_connect__static_method__Provider');
  late final _wire_connect__static_method__Provider =
      _wire_connect__static_method__ProviderPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  wire_NativeBech32Address new_NativeBech32Address() {
    return _new_NativeBech32Address();
  }

  late final _new_NativeBech32AddressPtr =
      _lookup<ffi.NativeFunction<wire_NativeBech32Address Function()>>(
          'new_NativeBech32Address');
  late final _new_NativeBech32Address = _new_NativeBech32AddressPtr
      .asFunction<wire_NativeBech32Address Function()>();

  ffi.Pointer<wire_Bech32Address> new_box_autoadd_bech_32_address_0() {
    return _new_box_autoadd_bech_32_address_0();
  }

  late final _new_box_autoadd_bech_32_address_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Bech32Address> Function()>>(
          'new_box_autoadd_bech_32_address_0');
  late final _new_box_autoadd_bech_32_address_0 =
      _new_box_autoadd_bech_32_address_0Ptr
          .asFunction<ffi.Pointer<wire_Bech32Address> Function()>();

  ffi.Pointer<wire_Provider> new_box_autoadd_provider_0() {
    return _new_box_autoadd_provider_0();
  }

  late final _new_box_autoadd_provider_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Provider> Function()>>(
          'new_box_autoadd_provider_0');
  late final _new_box_autoadd_provider_0 = _new_box_autoadd_provider_0Ptr
      .asFunction<ffi.Pointer<wire_Provider> Function()>();

  ffi.Pointer<wire_TxParameters> new_box_autoadd_tx_parameters_0() {
    return _new_box_autoadd_tx_parameters_0();
  }

  late final _new_box_autoadd_tx_parameters_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_TxParameters> Function()>>(
          'new_box_autoadd_tx_parameters_0');
  late final _new_box_autoadd_tx_parameters_0 =
      _new_box_autoadd_tx_parameters_0Ptr
          .asFunction<ffi.Pointer<wire_TxParameters> Function()>();

  ffi.Pointer<wire_WalletUnlocked> new_box_autoadd_wallet_unlocked_0() {
    return _new_box_autoadd_wallet_unlocked_0();
  }

  late final _new_box_autoadd_wallet_unlocked_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_WalletUnlocked> Function()>>(
          'new_box_autoadd_wallet_unlocked_0');
  late final _new_box_autoadd_wallet_unlocked_0 =
      _new_box_autoadd_wallet_unlocked_0Ptr
          .asFunction<ffi.Pointer<wire_WalletUnlocked> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_NativeBech32Address(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_NativeBech32Address(
      ptr,
    );
  }

  late final _drop_opaque_NativeBech32AddressPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_NativeBech32Address');
  late final _drop_opaque_NativeBech32Address =
      _drop_opaque_NativeBech32AddressPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_NativeBech32Address(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_NativeBech32Address(
      ptr,
    );
  }

  late final _share_opaque_NativeBech32AddressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_NativeBech32Address');
  late final _share_opaque_NativeBech32Address =
      _share_opaque_NativeBech32AddressPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_Provider extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> node_url;
}

class wire_WalletUnlocked extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> private_key;

  external ffi.Pointer<wire_uint_8_list> mnemonic_phrase;

  external ffi.Pointer<wire_Provider> provider;
}

class wire_NativeBech32Address extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_Bech32Address extends ffi.Struct {
  external wire_NativeBech32Address native;
}

class wire_TxParameters extends ffi.Struct {
  @ffi.Uint64()
  external int gas_price;

  @ffi.Uint64()
  external int gas_limit;

  @ffi.Uint32()
  external int maturity;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
