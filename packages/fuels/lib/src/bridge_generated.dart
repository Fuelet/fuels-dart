// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.57.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:collection/collection.dart';

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';

import 'package:meta/meta.dart';

part 'bridge_generated.freezed.dart';

abstract class Fuels {
  Future<WalletUnlocked> newRandomStaticMethodWalletUnlocked(
      {Provider? provider, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kNewRandomStaticMethodWalletUnlockedConstMeta;

  Future<WalletUnlocked> newFromPrivateKeyStaticMethodWalletUnlocked(
      {required String privateKey, Provider? provider, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kNewFromPrivateKeyStaticMethodWalletUnlockedConstMeta;

  Future<WalletUnlocked> newFromMnemonicPhraseStaticMethodWalletUnlocked(
      {required String phrase, Provider? provider, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kNewFromMnemonicPhraseStaticMethodWalletUnlockedConstMeta;

  Future<WalletUnlocked>
      newFromMnemonicPhraseWithPathStaticMethodWalletUnlocked(
          {required String phrase,
          Provider? provider,
          required String path,
          dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kNewFromMnemonicPhraseWithPathStaticMethodWalletUnlockedConstMeta;

  Future<Bech32Address> addressMethodWalletUnlocked(
      {required WalletUnlocked that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddressMethodWalletUnlockedConstMeta;

  Future<int> getAssetBalanceMethodWalletUnlocked(
      {required WalletUnlocked that, required String asset, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetAssetBalanceMethodWalletUnlockedConstMeta;

  Future<List<Balance>> getBalancesMethodWalletUnlocked(
      {required WalletUnlocked that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetBalancesMethodWalletUnlockedConstMeta;

  Future<TransactionsPaginatedResult> getTransactionsMethodWalletUnlocked(
      {required WalletUnlocked that,
      required PaginationRequest request,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kGetTransactionsMethodWalletUnlockedConstMeta;

  Future<TransferResponse> transferMethodWalletUnlocked(
      {required WalletUnlocked that,
      required Bech32Address to,
      required int amount,
      required String asset,
      required TxParameters txParameters,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTransferMethodWalletUnlockedConstMeta;

  Future<String> toBech32StringMethodBech32Address(
      {required Bech32Address that, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kToBech32StringMethodBech32AddressConstMeta;

  Future<String> toB256StringMethodBech32Address(
      {required Bech32Address that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kToB256StringMethodBech32AddressConstMeta;

  Future<Provider> connectStaticMethodProvider(
      {required String url, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectStaticMethodProviderConstMeta;

  DropFnType get dropOpaqueNativeBech32Address;
  ShareFnType get shareOpaqueNativeBech32Address;
  OpaqueTypeFinalizer get NativeBech32AddressFinalizer;

  DropFnType get dropOpaqueNativeProvider;
  ShareFnType get shareOpaqueNativeProvider;
  OpaqueTypeFinalizer get NativeProviderFinalizer;

  DropFnType get dropOpaqueNativeWalletUnlocked;
  ShareFnType get shareOpaqueNativeWalletUnlocked;
  OpaqueTypeFinalizer get NativeWalletUnlockedFinalizer;
}

@sealed
class NativeBech32Address extends FrbOpaque {
  final Fuels bridge;
  NativeBech32Address.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueNativeBech32Address;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueNativeBech32Address;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.NativeBech32AddressFinalizer;
}

@sealed
class NativeProvider extends FrbOpaque {
  final Fuels bridge;
  NativeProvider.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueNativeProvider;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueNativeProvider;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.NativeProviderFinalizer;
}

@sealed
class NativeWalletUnlocked extends FrbOpaque {
  final Fuels bridge;
  NativeWalletUnlocked.fromRaw(int ptr, int size, this.bridge)
      : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaqueNativeWalletUnlocked;

  @override
  ShareFnType get shareFn => bridge.shareOpaqueNativeWalletUnlocked;

  @override
  OpaqueTypeFinalizer get staticFinalizer =>
      bridge.NativeWalletUnlockedFinalizer;
}

class Balance {
  final String asset;
  final int amount;

  Balance({
    required this.asset,
    required this.amount,
  });
}

class Bech32Address {
  final Fuels bridge;
  final NativeBech32Address native;

  Bech32Address({
    required this.bridge,
    required this.native,
  });

  Future<String> toBech32String({dynamic hint}) =>
      bridge.toBech32StringMethodBech32Address(
        that: this,
      );

  Future<String> toB256String({dynamic hint}) =>
      bridge.toB256StringMethodBech32Address(
        that: this,
      );
}

class Create {
  final int gasPrice;
  final int gasLimit;
  final int maturity;
  final int bytecodeLength;
  final int bytecodeWitnessIndex;
  final List<StorageSlot> storageSlots;
  final List<Input> inputs;
  final List<Output> outputs;
  final List<Witness> witnesses;
  final U8Array32 salt;

  Create({
    required this.gasPrice,
    required this.gasLimit,
    required this.maturity,
    required this.bytecodeLength,
    required this.bytecodeWitnessIndex,
    required this.storageSlots,
    required this.inputs,
    required this.outputs,
    required this.witnesses,
    required this.salt,
  });
}

@freezed
class Input with _$Input {
  const factory Input.coinSigned({
    required UtxoId utxoId,
    required U8Array32 owner,
    required int amount,
    required U8Array32 assetId,
    required TxPointer txPointer,
    required int witnessIndex,
    required int maturity,
  }) = Input_CoinSigned;
  const factory Input.coinPredicate({
    required UtxoId utxoId,
    required U8Array32 owner,
    required int amount,
    required U8Array32 assetId,
    required TxPointer txPointer,
    required int maturity,
    required Uint8List predicate,
    required Uint8List predicateData,
  }) = Input_CoinPredicate;
  const factory Input.contract({
    required UtxoId utxoId,
    required U8Array32 balanceRoot,
    required U8Array32 stateRoot,
    required TxPointer txPointer,
    required U8Array32 contractId,
  }) = Input_Contract;
  const factory Input.messageSigned({
    required U8Array32 messageId,
    required U8Array32 sender,
    required U8Array32 recipient,
    required int amount,
    required int nonce,
    required int witnessIndex,
    required Uint8List data,
  }) = Input_MessageSigned;
  const factory Input.messagePredicate({
    required U8Array32 messageId,
    required U8Array32 sender,
    required U8Array32 recipient,
    required int amount,
    required int nonce,
    required Uint8List data,
    required Uint8List predicate,
    required Uint8List predicateData,
  }) = Input_MessagePredicate;
}

class InstructionResult {
  final int reason;

  InstructionResult({
    required this.reason,
  });
}

class Mint {
  final TxPointer txPointer;
  final List<Output> outputs;

  Mint({
    required this.txPointer,
    required this.outputs,
  });
}

@freezed
class Output with _$Output {
  const factory Output.coin({
    required U8Array32 to,
    required int amount,
    required U8Array32 assetId,
  }) = Output_Coin;
  const factory Output.contract({
    required int inputIndex,
    required U8Array32 balanceRoot,
    required U8Array32 stateRoot,
  }) = Output_Contract;
  const factory Output.message({
    required U8Array32 recipient,
    required int amount,
  }) = Output_Message;
  const factory Output.change({
    required U8Array32 to,
    required int amount,
    required U8Array32 assetId,
  }) = Output_Change;
  const factory Output.variable({
    required U8Array32 to,
    required int amount,
    required U8Array32 assetId,
  }) = Output_Variable;
  const factory Output.contractCreated({
    required U8Array32 contractId,
    required U8Array32 stateRoot,
  }) = Output_ContractCreated;
}

enum PageDirection {
  Forward,
  Backward,
}

class PaginationRequest {
  /// The cursor returned from a previous query to indicate an offset
  final String? cursor;

  /// The number of results to take
  final int results;

  /// The direction of the query (e.g. asc, desc order).
  final PageDirection direction;

  PaginationRequest({
    this.cursor,
    required this.results,
    required this.direction,
  });
}

class Provider {
  final Fuels bridge;
  final NativeProvider nativeProvider;

  Provider({
    required this.bridge,
    required this.nativeProvider,
  });

  static Future<Provider> connect(
          {required Fuels bridge, required String url, dynamic hint}) =>
      bridge.connectStaticMethodProvider(url: url, hint: hint);
}

@freezed
class Receipt with _$Receipt {
  const factory Receipt.call({
    required U8Array32 id,
    required U8Array32 to,
    required int amount,
    required U8Array32 assetId,
    required int gas,
    required int param1,
    required int param2,
    required int pc,
    required int isField,
  }) = Receipt_Call;
  const factory Receipt.returnReceipt({
    required U8Array32 id,
    required int val,
    required int pc,
    required int isField,
  }) = Receipt_ReturnReceipt;
  const factory Receipt.returnData({
    required U8Array32 id,
    required int ptr,
    required int len,
    required U8Array32 digest,
    required Uint8List data,
    required int pc,
    required int isField,
  }) = Receipt_ReturnData;
  const factory Receipt.panic({
    required U8Array32 id,
    required InstructionResult reason,
    required int pc,
    required int isField,
    U8Array32? contractId,
  }) = Receipt_Panic;
  const factory Receipt.revert({
    required U8Array32 id,
    required int ra,
    required int pc,
    required int isField,
  }) = Receipt_Revert;
  const factory Receipt.log({
    required U8Array32 id,
    required int ra,
    required int rb,
    required int rc,
    required int rd,
    required int pc,
    required int isField,
  }) = Receipt_Log;
  const factory Receipt.logData({
    required U8Array32 id,
    required int ra,
    required int rb,
    required int ptr,
    required int len,
    required U8Array32 digest,
    required Uint8List data,
    required int pc,
    required int isField,
  }) = Receipt_LogData;
  const factory Receipt.transfer({
    required U8Array32 id,
    required U8Array32 to,
    required int amount,
    required U8Array32 assetId,
    required int pc,
    required int isField,
  }) = Receipt_Transfer;
  const factory Receipt.transferOut({
    required U8Array32 id,
    required U8Array32 to,
    required int amount,
    required U8Array32 assetId,
    required int pc,
    required int isField,
  }) = Receipt_TransferOut;
  const factory Receipt.scriptResult({
    required ScriptExecutionResult result,
    required int gasUsed,
  }) = Receipt_ScriptResult;
  const factory Receipt.messageOut({
    required U8Array32 messageId,
    required U8Array32 sender,
    required U8Array32 recipient,
    required int amount,
    required U8Array32 nonce,
    required int len,
    required U8Array32 digest,
    required Uint8List data,
  }) = Receipt_MessageOut;
}

class Script {
  final int gasPrice;
  final int gasLimit;
  final int maturity;
  final Uint8List script;
  final Uint8List scriptData;
  final List<Input> inputs;
  final List<Output> outputs;
  final List<Witness> witnesses;
  final U8Array32 receiptsRoot;

  Script({
    required this.gasPrice,
    required this.gasLimit,
    required this.maturity,
    required this.script,
    required this.scriptData,
    required this.inputs,
    required this.outputs,
    required this.witnesses,
    required this.receiptsRoot,
  });
}

@freezed
class ScriptExecutionResult with _$ScriptExecutionResult {
  const factory ScriptExecutionResult.success() = ScriptExecutionResult_Success;
  const factory ScriptExecutionResult.revert() = ScriptExecutionResult_Revert;
  const factory ScriptExecutionResult.panic() = ScriptExecutionResult_Panic;
  const factory ScriptExecutionResult.genericFailure(
    int field0,
  ) = ScriptExecutionResult_GenericFailure;
}

class StorageSlot {
  final U8Array32 key;
  final U8Array32 value;

  StorageSlot({
    required this.key,
    required this.value,
  });
}

@freezed
class Transaction with _$Transaction {
  const factory Transaction.script(
    Script field0,
  ) = Transaction_Script;
  const factory Transaction.create(
    Create field0,
  ) = Transaction_Create;
  const factory Transaction.mint(
    Mint field0,
  ) = Transaction_Mint;
}

class TransactionResponse {
  final Transaction transaction;
  final TransactionStatus status;
  final String? blockId;
  final String? time;

  TransactionResponse({
    required this.transaction,
    required this.status,
    this.blockId,
    this.time,
  });
}

enum TransactionStatus {
  Submitted,
  Success,
  Failure,
  SqueezedOut,
}

class TransactionsPaginatedResult {
  final String? cursor;
  final List<TransactionResponse> results;
  final bool hasNextPage;
  final bool hasPreviousPage;

  TransactionsPaginatedResult({
    this.cursor,
    required this.results,
    required this.hasNextPage,
    required this.hasPreviousPage,
  });
}

class TransferResponse {
  final String txId;
  final List<Receipt> receipts;

  TransferResponse({
    required this.txId,
    required this.receipts,
  });
}

class TxParameters {
  final int gasPrice;
  final int gasLimit;
  final int maturity;

  TxParameters({
    required this.gasPrice,
    required this.gasLimit,
    required this.maturity,
  });
}

class TxPointer {
  final int blockHeight;
  final int txIndex;

  TxPointer({
    required this.blockHeight,
    required this.txIndex,
  });
}

class U8Array32 extends NonGrowableListView<int> {
  static const arraySize = 32;
  U8Array32(Uint8List inner)
      : assert(inner.length == arraySize),
        super(inner);
  U8Array32.unchecked(Uint8List inner) : super(inner);
  U8Array32.init() : super(Uint8List(arraySize));
}

class UtxoId {
  final U8Array32 txId;
  final int outputIndex;

  UtxoId({
    required this.txId,
    required this.outputIndex,
  });
}

class WalletUnlocked {
  final Fuels bridge;
  final NativeWalletUnlocked nativeWalletUnlocked;
  final String privateKey;
  final String? mnemonicPhrase;

  WalletUnlocked({
    required this.bridge,
    required this.nativeWalletUnlocked,
    required this.privateKey,
    this.mnemonicPhrase,
  });

  static Future<WalletUnlocked> newRandom(
          {required Fuels bridge, Provider? provider, dynamic hint}) =>
      bridge.newRandomStaticMethodWalletUnlocked(
          provider: provider, hint: hint);

  static Future<WalletUnlocked> newFromPrivateKey(
          {required Fuels bridge,
          required String privateKey,
          Provider? provider,
          dynamic hint}) =>
      bridge.newFromPrivateKeyStaticMethodWalletUnlocked(
          privateKey: privateKey, provider: provider, hint: hint);

  static Future<WalletUnlocked> newFromMnemonicPhrase(
          {required Fuels bridge,
          required String phrase,
          Provider? provider,
          dynamic hint}) =>
      bridge.newFromMnemonicPhraseStaticMethodWalletUnlocked(
          phrase: phrase, provider: provider, hint: hint);

  static Future<WalletUnlocked> newFromMnemonicPhraseWithPath(
          {required Fuels bridge,
          required String phrase,
          Provider? provider,
          required String path,
          dynamic hint}) =>
      bridge.newFromMnemonicPhraseWithPathStaticMethodWalletUnlocked(
          phrase: phrase, provider: provider, path: path, hint: hint);

  Future<Bech32Address> address({dynamic hint}) =>
      bridge.addressMethodWalletUnlocked(
        that: this,
      );

  Future<int> getAssetBalance({required String asset, dynamic hint}) =>
      bridge.getAssetBalanceMethodWalletUnlocked(
        that: this,
        asset: asset,
      );

  Future<List<Balance>> getBalances({dynamic hint}) =>
      bridge.getBalancesMethodWalletUnlocked(
        that: this,
      );

  Future<TransactionsPaginatedResult> getTransactions(
          {required PaginationRequest request, dynamic hint}) =>
      bridge.getTransactionsMethodWalletUnlocked(
        that: this,
        request: request,
      );

  Future<TransferResponse> transfer(
          {required Bech32Address to,
          required int amount,
          required String asset,
          required TxParameters txParameters,
          dynamic hint}) =>
      bridge.transferMethodWalletUnlocked(
        that: this,
        to: to,
        amount: amount,
        asset: asset,
        txParameters: txParameters,
      );
}

class Witness {
  final Uint8List data;

  Witness({
    required this.data,
  });
}

class FuelsImpl implements Fuels {
  final FuelsPlatform _platform;
  factory FuelsImpl(ExternalLibrary dylib) =>
      FuelsImpl.raw(FuelsPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory FuelsImpl.wasm(FutureOr<WasmModule> module) =>
      FuelsImpl(module as ExternalLibrary);
  FuelsImpl.raw(this._platform);
  Future<WalletUnlocked> newRandomStaticMethodWalletUnlocked(
      {Provider? provider, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_box_autoadd_provider(provider);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new_random__static_method__WalletUnlocked(port_, arg0),
      parseSuccessData: (d) => _wire2api_wallet_unlocked(d),
      constMeta: kNewRandomStaticMethodWalletUnlockedConstMeta,
      argValues: [provider],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewRandomStaticMethodWalletUnlockedConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "new_random__static_method__WalletUnlocked",
            argNames: ["provider"],
          );

  Future<WalletUnlocked> newFromPrivateKeyStaticMethodWalletUnlocked(
      {required String privateKey, Provider? provider, dynamic hint}) {
    var arg0 = _platform.api2wire_String(privateKey);
    var arg1 = _platform.api2wire_opt_box_autoadd_provider(provider);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new_from_private_key__static_method__WalletUnlocked(
              port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_wallet_unlocked(d),
      constMeta: kNewFromPrivateKeyStaticMethodWalletUnlockedConstMeta,
      argValues: [privateKey, provider],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewFromPrivateKeyStaticMethodWalletUnlockedConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "new_from_private_key__static_method__WalletUnlocked",
            argNames: ["privateKey", "provider"],
          );

  Future<WalletUnlocked> newFromMnemonicPhraseStaticMethodWalletUnlocked(
      {required String phrase, Provider? provider, dynamic hint}) {
    var arg0 = _platform.api2wire_String(phrase);
    var arg1 = _platform.api2wire_opt_box_autoadd_provider(provider);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new_from_mnemonic_phrase__static_method__WalletUnlocked(
              port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_wallet_unlocked(d),
      constMeta: kNewFromMnemonicPhraseStaticMethodWalletUnlockedConstMeta,
      argValues: [phrase, provider],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewFromMnemonicPhraseStaticMethodWalletUnlockedConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName:
                "new_from_mnemonic_phrase__static_method__WalletUnlocked",
            argNames: ["phrase", "provider"],
          );

  Future<WalletUnlocked>
      newFromMnemonicPhraseWithPathStaticMethodWalletUnlocked(
          {required String phrase,
          Provider? provider,
          required String path,
          dynamic hint}) {
    var arg0 = _platform.api2wire_String(phrase);
    var arg1 = _platform.api2wire_opt_box_autoadd_provider(provider);
    var arg2 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_new_from_mnemonic_phrase_with_path__static_method__WalletUnlocked(
              port_, arg0, arg1, arg2),
      parseSuccessData: (d) => _wire2api_wallet_unlocked(d),
      constMeta:
          kNewFromMnemonicPhraseWithPathStaticMethodWalletUnlockedConstMeta,
      argValues: [phrase, provider, path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kNewFromMnemonicPhraseWithPathStaticMethodWalletUnlockedConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName:
                "new_from_mnemonic_phrase_with_path__static_method__WalletUnlocked",
            argNames: ["phrase", "provider", "path"],
          );

  Future<Bech32Address> addressMethodWalletUnlocked(
      {required WalletUnlocked that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wallet_unlocked(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_address__method__WalletUnlocked(port_, arg0),
      parseSuccessData: (d) => _wire2api_bech_32_address(d),
      constMeta: kAddressMethodWalletUnlockedConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddressMethodWalletUnlockedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "address__method__WalletUnlocked",
        argNames: ["that"],
      );

  Future<int> getAssetBalanceMethodWalletUnlocked(
      {required WalletUnlocked that, required String asset, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wallet_unlocked(that);
    var arg1 = _platform.api2wire_String(asset);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_asset_balance__method__WalletUnlocked(port_, arg0, arg1),
      parseSuccessData: _wire2api_u64,
      constMeta: kGetAssetBalanceMethodWalletUnlockedConstMeta,
      argValues: [that, asset],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetAssetBalanceMethodWalletUnlockedConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_asset_balance__method__WalletUnlocked",
            argNames: ["that", "asset"],
          );

  Future<List<Balance>> getBalancesMethodWalletUnlocked(
      {required WalletUnlocked that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wallet_unlocked(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_balances__method__WalletUnlocked(port_, arg0),
      parseSuccessData: _wire2api_list_balance,
      constMeta: kGetBalancesMethodWalletUnlockedConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetBalancesMethodWalletUnlockedConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_balances__method__WalletUnlocked",
            argNames: ["that"],
          );

  Future<TransactionsPaginatedResult> getTransactionsMethodWalletUnlocked(
      {required WalletUnlocked that,
      required PaginationRequest request,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wallet_unlocked(that);
    var arg1 = _platform.api2wire_box_autoadd_pagination_request(request);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_transactions__method__WalletUnlocked(port_, arg0, arg1),
      parseSuccessData: _wire2api_transactions_paginated_result,
      constMeta: kGetTransactionsMethodWalletUnlockedConstMeta,
      argValues: [that, request],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetTransactionsMethodWalletUnlockedConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_transactions__method__WalletUnlocked",
            argNames: ["that", "request"],
          );

  Future<TransferResponse> transferMethodWalletUnlocked(
      {required WalletUnlocked that,
      required Bech32Address to,
      required int amount,
      required String asset,
      required TxParameters txParameters,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_wallet_unlocked(that);
    var arg1 = _platform.api2wire_box_autoadd_bech_32_address(to);
    var arg2 = _platform.api2wire_u64(amount);
    var arg3 = _platform.api2wire_String(asset);
    var arg4 = _platform.api2wire_box_autoadd_tx_parameters(txParameters);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_transfer__method__WalletUnlocked(
          port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_transfer_response,
      constMeta: kTransferMethodWalletUnlockedConstMeta,
      argValues: [that, to, amount, asset, txParameters],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTransferMethodWalletUnlockedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "transfer__method__WalletUnlocked",
        argNames: ["that", "to", "amount", "asset", "txParameters"],
      );

  Future<String> toBech32StringMethodBech32Address(
      {required Bech32Address that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_bech_32_address(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_to_bech32_string__method__Bech32Address(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kToBech32StringMethodBech32AddressConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kToBech32StringMethodBech32AddressConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "to_bech32_string__method__Bech32Address",
            argNames: ["that"],
          );

  Future<String> toB256StringMethodBech32Address(
      {required Bech32Address that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_bech_32_address(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_to_b256_string__method__Bech32Address(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kToB256StringMethodBech32AddressConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kToB256StringMethodBech32AddressConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "to_b256_string__method__Bech32Address",
            argNames: ["that"],
          );

  Future<Provider> connectStaticMethodProvider(
      {required String url, dynamic hint}) {
    var arg0 = _platform.api2wire_String(url);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_connect__static_method__Provider(port_, arg0),
      parseSuccessData: (d) => _wire2api_provider(d),
      constMeta: kConnectStaticMethodProviderConstMeta,
      argValues: [url],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectStaticMethodProviderConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "connect__static_method__Provider",
        argNames: ["url"],
      );

  DropFnType get dropOpaqueNativeBech32Address =>
      _platform.inner.drop_opaque_NativeBech32Address;
  ShareFnType get shareOpaqueNativeBech32Address =>
      _platform.inner.share_opaque_NativeBech32Address;
  OpaqueTypeFinalizer get NativeBech32AddressFinalizer =>
      _platform.NativeBech32AddressFinalizer;

  DropFnType get dropOpaqueNativeProvider =>
      _platform.inner.drop_opaque_NativeProvider;
  ShareFnType get shareOpaqueNativeProvider =>
      _platform.inner.share_opaque_NativeProvider;
  OpaqueTypeFinalizer get NativeProviderFinalizer =>
      _platform.NativeProviderFinalizer;

  DropFnType get dropOpaqueNativeWalletUnlocked =>
      _platform.inner.drop_opaque_NativeWalletUnlocked;
  ShareFnType get shareOpaqueNativeWalletUnlocked =>
      _platform.inner.share_opaque_NativeWalletUnlocked;
  OpaqueTypeFinalizer get NativeWalletUnlockedFinalizer =>
      _platform.NativeWalletUnlockedFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  NativeBech32Address _wire2api_NativeBech32Address(dynamic raw) {
    return NativeBech32Address.fromRaw(raw[0], raw[1], this);
  }

  NativeProvider _wire2api_NativeProvider(dynamic raw) {
    return NativeProvider.fromRaw(raw[0], raw[1], this);
  }

  NativeWalletUnlocked _wire2api_NativeWalletUnlocked(dynamic raw) {
    return NativeWalletUnlocked.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  Balance _wire2api_balance(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Balance(
      asset: _wire2api_String(arr[0]),
      amount: _wire2api_u64(arr[1]),
    );
  }

  Bech32Address _wire2api_bech_32_address(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Bech32Address(
      bridge: this,
      native: _wire2api_NativeBech32Address(arr[0]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  Create _wire2api_box_autoadd_create(dynamic raw) {
    return _wire2api_create(raw);
  }

  InstructionResult _wire2api_box_autoadd_instruction_result(dynamic raw) {
    return _wire2api_instruction_result(raw);
  }

  Mint _wire2api_box_autoadd_mint(dynamic raw) {
    return _wire2api_mint(raw);
  }

  Script _wire2api_box_autoadd_script(dynamic raw) {
    return _wire2api_script(raw);
  }

  ScriptExecutionResult _wire2api_box_autoadd_script_execution_result(
      dynamic raw) {
    return _wire2api_script_execution_result(raw);
  }

  TxPointer _wire2api_box_autoadd_tx_pointer(dynamic raw) {
    return _wire2api_tx_pointer(raw);
  }

  UtxoId _wire2api_box_autoadd_utxo_id(dynamic raw) {
    return _wire2api_utxo_id(raw);
  }

  Create _wire2api_create(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return Create(
      gasPrice: _wire2api_u64(arr[0]),
      gasLimit: _wire2api_u64(arr[1]),
      maturity: _wire2api_u64(arr[2]),
      bytecodeLength: _wire2api_u64(arr[3]),
      bytecodeWitnessIndex: _wire2api_u8(arr[4]),
      storageSlots: _wire2api_list_storage_slot(arr[5]),
      inputs: _wire2api_list_input(arr[6]),
      outputs: _wire2api_list_output(arr[7]),
      witnesses: _wire2api_list_witness(arr[8]),
      salt: _wire2api_u8_array_32(arr[9]),
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  Input _wire2api_input(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return Input_CoinSigned(
          utxoId: _wire2api_box_autoadd_utxo_id(raw[1]),
          owner: _wire2api_u8_array_32(raw[2]),
          amount: _wire2api_u64(raw[3]),
          assetId: _wire2api_u8_array_32(raw[4]),
          txPointer: _wire2api_box_autoadd_tx_pointer(raw[5]),
          witnessIndex: _wire2api_u8(raw[6]),
          maturity: _wire2api_u64(raw[7]),
        );
      case 1:
        return Input_CoinPredicate(
          utxoId: _wire2api_box_autoadd_utxo_id(raw[1]),
          owner: _wire2api_u8_array_32(raw[2]),
          amount: _wire2api_u64(raw[3]),
          assetId: _wire2api_u8_array_32(raw[4]),
          txPointer: _wire2api_box_autoadd_tx_pointer(raw[5]),
          maturity: _wire2api_u64(raw[6]),
          predicate: _wire2api_uint_8_list(raw[7]),
          predicateData: _wire2api_uint_8_list(raw[8]),
        );
      case 2:
        return Input_Contract(
          utxoId: _wire2api_box_autoadd_utxo_id(raw[1]),
          balanceRoot: _wire2api_u8_array_32(raw[2]),
          stateRoot: _wire2api_u8_array_32(raw[3]),
          txPointer: _wire2api_box_autoadd_tx_pointer(raw[4]),
          contractId: _wire2api_u8_array_32(raw[5]),
        );
      case 3:
        return Input_MessageSigned(
          messageId: _wire2api_u8_array_32(raw[1]),
          sender: _wire2api_u8_array_32(raw[2]),
          recipient: _wire2api_u8_array_32(raw[3]),
          amount: _wire2api_u64(raw[4]),
          nonce: _wire2api_u64(raw[5]),
          witnessIndex: _wire2api_u8(raw[6]),
          data: _wire2api_uint_8_list(raw[7]),
        );
      case 4:
        return Input_MessagePredicate(
          messageId: _wire2api_u8_array_32(raw[1]),
          sender: _wire2api_u8_array_32(raw[2]),
          recipient: _wire2api_u8_array_32(raw[3]),
          amount: _wire2api_u64(raw[4]),
          nonce: _wire2api_u64(raw[5]),
          data: _wire2api_uint_8_list(raw[6]),
          predicate: _wire2api_uint_8_list(raw[7]),
          predicateData: _wire2api_uint_8_list(raw[8]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  InstructionResult _wire2api_instruction_result(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return InstructionResult(
      reason: _wire2api_u32(arr[0]),
    );
  }

  List<Balance> _wire2api_list_balance(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_balance).toList();
  }

  List<Input> _wire2api_list_input(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_input).toList();
  }

  List<Output> _wire2api_list_output(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_output).toList();
  }

  List<Receipt> _wire2api_list_receipt(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_receipt).toList();
  }

  List<StorageSlot> _wire2api_list_storage_slot(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_storage_slot).toList();
  }

  List<TransactionResponse> _wire2api_list_transaction_response(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_transaction_response).toList();
  }

  List<Witness> _wire2api_list_witness(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_witness).toList();
  }

  Mint _wire2api_mint(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Mint(
      txPointer: _wire2api_tx_pointer(arr[0]),
      outputs: _wire2api_list_output(arr[1]),
    );
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  U8Array32? _wire2api_opt_u8_array_32(dynamic raw) {
    return raw == null ? null : _wire2api_u8_array_32(raw);
  }

  Output _wire2api_output(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return Output_Coin(
          to: _wire2api_u8_array_32(raw[1]),
          amount: _wire2api_u64(raw[2]),
          assetId: _wire2api_u8_array_32(raw[3]),
        );
      case 1:
        return Output_Contract(
          inputIndex: _wire2api_u8(raw[1]),
          balanceRoot: _wire2api_u8_array_32(raw[2]),
          stateRoot: _wire2api_u8_array_32(raw[3]),
        );
      case 2:
        return Output_Message(
          recipient: _wire2api_u8_array_32(raw[1]),
          amount: _wire2api_u64(raw[2]),
        );
      case 3:
        return Output_Change(
          to: _wire2api_u8_array_32(raw[1]),
          amount: _wire2api_u64(raw[2]),
          assetId: _wire2api_u8_array_32(raw[3]),
        );
      case 4:
        return Output_Variable(
          to: _wire2api_u8_array_32(raw[1]),
          amount: _wire2api_u64(raw[2]),
          assetId: _wire2api_u8_array_32(raw[3]),
        );
      case 5:
        return Output_ContractCreated(
          contractId: _wire2api_u8_array_32(raw[1]),
          stateRoot: _wire2api_u8_array_32(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  Provider _wire2api_provider(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Provider(
      bridge: this,
      nativeProvider: _wire2api_NativeProvider(arr[0]),
    );
  }

  Receipt _wire2api_receipt(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return Receipt_Call(
          id: _wire2api_u8_array_32(raw[1]),
          to: _wire2api_u8_array_32(raw[2]),
          amount: _wire2api_u64(raw[3]),
          assetId: _wire2api_u8_array_32(raw[4]),
          gas: _wire2api_u64(raw[5]),
          param1: _wire2api_u64(raw[6]),
          param2: _wire2api_u64(raw[7]),
          pc: _wire2api_u64(raw[8]),
          isField: _wire2api_u64(raw[9]),
        );
      case 1:
        return Receipt_ReturnReceipt(
          id: _wire2api_u8_array_32(raw[1]),
          val: _wire2api_u64(raw[2]),
          pc: _wire2api_u64(raw[3]),
          isField: _wire2api_u64(raw[4]),
        );
      case 2:
        return Receipt_ReturnData(
          id: _wire2api_u8_array_32(raw[1]),
          ptr: _wire2api_u64(raw[2]),
          len: _wire2api_u64(raw[3]),
          digest: _wire2api_u8_array_32(raw[4]),
          data: _wire2api_uint_8_list(raw[5]),
          pc: _wire2api_u64(raw[6]),
          isField: _wire2api_u64(raw[7]),
        );
      case 3:
        return Receipt_Panic(
          id: _wire2api_u8_array_32(raw[1]),
          reason: _wire2api_box_autoadd_instruction_result(raw[2]),
          pc: _wire2api_u64(raw[3]),
          isField: _wire2api_u64(raw[4]),
          contractId: _wire2api_opt_u8_array_32(raw[5]),
        );
      case 4:
        return Receipt_Revert(
          id: _wire2api_u8_array_32(raw[1]),
          ra: _wire2api_u64(raw[2]),
          pc: _wire2api_u64(raw[3]),
          isField: _wire2api_u64(raw[4]),
        );
      case 5:
        return Receipt_Log(
          id: _wire2api_u8_array_32(raw[1]),
          ra: _wire2api_u64(raw[2]),
          rb: _wire2api_u64(raw[3]),
          rc: _wire2api_u64(raw[4]),
          rd: _wire2api_u64(raw[5]),
          pc: _wire2api_u64(raw[6]),
          isField: _wire2api_u64(raw[7]),
        );
      case 6:
        return Receipt_LogData(
          id: _wire2api_u8_array_32(raw[1]),
          ra: _wire2api_u64(raw[2]),
          rb: _wire2api_u64(raw[3]),
          ptr: _wire2api_u64(raw[4]),
          len: _wire2api_u64(raw[5]),
          digest: _wire2api_u8_array_32(raw[6]),
          data: _wire2api_uint_8_list(raw[7]),
          pc: _wire2api_u64(raw[8]),
          isField: _wire2api_u64(raw[9]),
        );
      case 7:
        return Receipt_Transfer(
          id: _wire2api_u8_array_32(raw[1]),
          to: _wire2api_u8_array_32(raw[2]),
          amount: _wire2api_u64(raw[3]),
          assetId: _wire2api_u8_array_32(raw[4]),
          pc: _wire2api_u64(raw[5]),
          isField: _wire2api_u64(raw[6]),
        );
      case 8:
        return Receipt_TransferOut(
          id: _wire2api_u8_array_32(raw[1]),
          to: _wire2api_u8_array_32(raw[2]),
          amount: _wire2api_u64(raw[3]),
          assetId: _wire2api_u8_array_32(raw[4]),
          pc: _wire2api_u64(raw[5]),
          isField: _wire2api_u64(raw[6]),
        );
      case 9:
        return Receipt_ScriptResult(
          result: _wire2api_box_autoadd_script_execution_result(raw[1]),
          gasUsed: _wire2api_u64(raw[2]),
        );
      case 10:
        return Receipt_MessageOut(
          messageId: _wire2api_u8_array_32(raw[1]),
          sender: _wire2api_u8_array_32(raw[2]),
          recipient: _wire2api_u8_array_32(raw[3]),
          amount: _wire2api_u64(raw[4]),
          nonce: _wire2api_u8_array_32(raw[5]),
          len: _wire2api_u64(raw[6]),
          digest: _wire2api_u8_array_32(raw[7]),
          data: _wire2api_uint_8_list(raw[8]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  Script _wire2api_script(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return Script(
      gasPrice: _wire2api_u64(arr[0]),
      gasLimit: _wire2api_u64(arr[1]),
      maturity: _wire2api_u64(arr[2]),
      script: _wire2api_uint_8_list(arr[3]),
      scriptData: _wire2api_uint_8_list(arr[4]),
      inputs: _wire2api_list_input(arr[5]),
      outputs: _wire2api_list_output(arr[6]),
      witnesses: _wire2api_list_witness(arr[7]),
      receiptsRoot: _wire2api_u8_array_32(arr[8]),
    );
  }

  ScriptExecutionResult _wire2api_script_execution_result(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return ScriptExecutionResult_Success();
      case 1:
        return ScriptExecutionResult_Revert();
      case 2:
        return ScriptExecutionResult_Panic();
      case 3:
        return ScriptExecutionResult_GenericFailure(
          _wire2api_u64(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  StorageSlot _wire2api_storage_slot(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StorageSlot(
      key: _wire2api_u8_array_32(arr[0]),
      value: _wire2api_u8_array_32(arr[1]),
    );
  }

  Transaction _wire2api_transaction(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return Transaction_Script(
          _wire2api_box_autoadd_script(raw[1]),
        );
      case 1:
        return Transaction_Create(
          _wire2api_box_autoadd_create(raw[1]),
        );
      case 2:
        return Transaction_Mint(
          _wire2api_box_autoadd_mint(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  TransactionResponse _wire2api_transaction_response(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TransactionResponse(
      transaction: _wire2api_transaction(arr[0]),
      status: _wire2api_transaction_status(arr[1]),
      blockId: _wire2api_opt_String(arr[2]),
      time: _wire2api_opt_String(arr[3]),
    );
  }

  TransactionStatus _wire2api_transaction_status(dynamic raw) {
    return TransactionStatus.values[raw];
  }

  TransactionsPaginatedResult _wire2api_transactions_paginated_result(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TransactionsPaginatedResult(
      cursor: _wire2api_opt_String(arr[0]),
      results: _wire2api_list_transaction_response(arr[1]),
      hasNextPage: _wire2api_bool(arr[2]),
      hasPreviousPage: _wire2api_bool(arr[3]),
    );
  }

  TransferResponse _wire2api_transfer_response(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TransferResponse(
      txId: _wire2api_String(arr[0]),
      receipts: _wire2api_list_receipt(arr[1]),
    );
  }

  TxPointer _wire2api_tx_pointer(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TxPointer(
      blockHeight: _wire2api_u32(arr[0]),
      txIndex: _wire2api_u16(arr[1]),
    );
  }

  int _wire2api_u16(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  U8Array32 _wire2api_u8_array_32(dynamic raw) {
    return U8Array32(_wire2api_uint_8_list(raw));
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  UtxoId _wire2api_utxo_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return UtxoId(
      txId: _wire2api_u8_array_32(arr[0]),
      outputIndex: _wire2api_u8(arr[1]),
    );
  }

  WalletUnlocked _wire2api_wallet_unlocked(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return WalletUnlocked(
      bridge: this,
      nativeWalletUnlocked: _wire2api_NativeWalletUnlocked(arr[0]),
      privateKey: _wire2api_String(arr[1]),
      mnemonicPhrase: _wire2api_opt_String(arr[2]),
    );
  }

  Witness _wire2api_witness(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Witness(
      data: _wire2api_uint_8_list(arr[0]),
    );
  }
}

// Section: api2wire

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_page_direction(PageDirection raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}

// Section: finalizer
